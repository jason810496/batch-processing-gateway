# coding: utf-8

"""
    Batch Processing Gateway API

    Batch Processing Gateway API is a RESTful web service to submit, examine and delete Spark jobs.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from bpg_api_client.models.submit_application_request import SubmitApplicationRequest

class TestSubmitApplicationRequest(unittest.TestCase):
    """SubmitApplicationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubmitApplicationRequest:
        """Test SubmitApplicationRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubmitApplicationRequest`
        """
        model = SubmitApplicationRequest()
        if include_optional:
            return SubmitApplicationRequest(
                submission_id_suffix = '',
                application_name = '',
                type = '',
                image = '',
                spot_instance = True,
                spark_version = '',
                main_class = 'com.spark.examples.OneStageApp',
                main_application_file = '',
                arguments = [
                    ''
                    ],
                annotations = {
                    'key' : ''
                    },
                driver = bpg_api_client.models.driver_spec.DriverSpec(
                    cores = 56, 
                    core_request = '', 
                    core_limit = '', 
                    memory = '', 
                    memory_overhead = '', 
                    image = '', 
                    env = [
                        bpg_api_client.models.env_var.EnvVar(
                            name = '', 
                            value = '', )
                        ], 
                    annotations = {
                        'key' : ''
                        }, ),
                executor = bpg_api_client.models.executor_spec.ExecutorSpec(
                    cores = 56, 
                    core_request = '', 
                    core_limit = '', 
                    memory = '', 
                    memory_overhead = '', 
                    image = '', 
                    env = [
                        bpg_api_client.models.env_var.EnvVar(
                            name = '', 
                            value = '', )
                        ], 
                    annotations = {
                        'key' : ''
                        }, 
                    instances = 56, ),
                deps = bpg_api_client.models.dependencies.Dependencies(
                    jars = [
                        ''
                        ], 
                    files = [
                        ''
                        ], 
                    py_files = [
                        ''
                        ], 
                    packages = [
                        ''
                        ], 
                    exclude_packages = [
                        ''
                        ], 
                    repositories = [
                        ''
                        ], 
                    archives = [
                        ''
                        ], ),
                python_version = '',
                queue = ''
            )
        else:
            return SubmitApplicationRequest(
                spark_version = '',
                main_application_file = '',
                driver = bpg_api_client.models.driver_spec.DriverSpec(
                    cores = 56, 
                    core_request = '', 
                    core_limit = '', 
                    memory = '', 
                    memory_overhead = '', 
                    image = '', 
                    env = [
                        bpg_api_client.models.env_var.EnvVar(
                            name = '', 
                            value = '', )
                        ], 
                    annotations = {
                        'key' : ''
                        }, ),
                executor = bpg_api_client.models.executor_spec.ExecutorSpec(
                    cores = 56, 
                    core_request = '', 
                    core_limit = '', 
                    memory = '', 
                    memory_overhead = '', 
                    image = '', 
                    env = [
                        bpg_api_client.models.env_var.EnvVar(
                            name = '', 
                            value = '', )
                        ], 
                    annotations = {
                        'key' : ''
                        }, 
                    instances = 56, ),
        )
        """

    def testSubmitApplicationRequest(self):
        """Test SubmitApplicationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
