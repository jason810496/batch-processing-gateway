# coding: utf-8

"""
    Batch Processing Gateway API

    Batch Processing Gateway API is a RESTful web service to submit, examine and delete Spark jobs.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from bpg_api_client.models.dependencies import Dependencies
from bpg_api_client.models.driver_spec import DriverSpec
from bpg_api_client.models.executor_spec import ExecutorSpec
from typing import Optional, Set
from typing_extensions import Self

class SparkApplicationSpec(BaseModel):
    """
    SparkApplicationSpec
    """ # noqa: E501
    type: Optional[StrictStr] = None
    spark_version: Optional[StrictStr] = Field(default=None, alias="sparkVersion")
    original_user: Optional[StrictStr] = Field(default=None, alias="originalUser")
    proxy_user: Optional[StrictStr] = Field(default=None, alias="proxyUser")
    image: Optional[StrictStr] = None
    main_class: Optional[StrictStr] = Field(default=None, alias="mainClass")
    main_application_file: Optional[StrictStr] = Field(default=None, alias="mainApplicationFile")
    arguments: Optional[List[StrictStr]] = None
    annotations: Optional[Dict[str, StrictStr]] = None
    driver: Optional[DriverSpec] = None
    executor: Optional[ExecutorSpec] = None
    deps: Optional[Dependencies] = None
    python_version: Optional[StrictStr] = Field(default=None, alias="pythonVersion")
    __properties: ClassVar[List[str]] = ["type", "sparkVersion", "originalUser", "proxyUser", "image", "mainClass", "mainApplicationFile", "arguments", "annotations", "driver", "executor", "deps", "pythonVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SparkApplicationSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of driver
        if self.driver:
            _dict['driver'] = self.driver.to_dict()
        # override the default output from pydantic by calling `to_dict()` of executor
        if self.executor:
            _dict['executor'] = self.executor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deps
        if self.deps:
            _dict['deps'] = self.deps.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SparkApplicationSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "sparkVersion": obj.get("sparkVersion"),
            "originalUser": obj.get("originalUser"),
            "proxyUser": obj.get("proxyUser"),
            "image": obj.get("image"),
            "mainClass": obj.get("mainClass"),
            "mainApplicationFile": obj.get("mainApplicationFile"),
            "arguments": obj.get("arguments"),
            "annotations": obj.get("annotations"),
            "driver": DriverSpec.from_dict(obj["driver"]) if obj.get("driver") is not None else None,
            "executor": ExecutorSpec.from_dict(obj["executor"]) if obj.get("executor") is not None else None,
            "deps": Dependencies.from_dict(obj["deps"]) if obj.get("deps") is not None else None,
            "pythonVersion": obj.get("pythonVersion")
        })
        return _obj


