# coding: utf-8

"""
    Batch Processing Gateway API

    Batch Processing Gateway API is a RESTful web service to submit, examine and delete Spark jobs.

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetSubmissionStatusResponse(BaseModel):
    """
    GetSubmissionStatusResponse
    """ # noqa: E501
    creation_time: Optional[StrictInt] = Field(default=None, alias="creationTime")
    spark_application_id: Optional[StrictStr] = Field(default=None, alias="sparkApplicationId")
    execution_attempts: Optional[StrictInt] = Field(default=None, alias="executionAttempts")
    termination_time: Optional[StrictInt] = Field(default=None, alias="terminationTime")
    duration: Optional[StrictInt] = None
    application_state: Optional[StrictStr] = Field(default=None, alias="applicationState")
    application_error_message: Optional[StrictStr] = Field(default=None, alias="applicationErrorMessage")
    spark_ui_url: Optional[StrictStr] = Field(default=None, alias="sparkUIUrl")
    __properties: ClassVar[List[str]] = ["creationTime", "sparkApplicationId", "executionAttempts", "terminationTime", "duration", "applicationState", "applicationErrorMessage", "sparkUIUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSubmissionStatusResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSubmissionStatusResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "sparkApplicationId": obj.get("sparkApplicationId"),
            "executionAttempts": obj.get("executionAttempts"),
            "terminationTime": obj.get("terminationTime"),
            "duration": obj.get("duration"),
            "applicationState": obj.get("applicationState"),
            "applicationErrorMessage": obj.get("applicationErrorMessage"),
            "sparkUIUrl": obj.get("sparkUIUrl")
        })
        return _obj


